from django.shortcuts import render,render_to_response, get_object_or_404
from models import Posts,Categories,Comment_Section,Inappropriate_words
from .forms import Comment_Form , Categories_form
from django.http import HttpResponseRedirect, HttpResponse
from django.utils import timezone
from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger




def view_all_categories(request):
	all_cat = Categories.objects.all()
	context = {'all_categories':all_cat}
	return render_to_response ('blog/all_categories.html',context)

# -------------------- new category --------------------------------------
def add_category(request):
	form = Categories_form()
	if request.method == 'POST':
		if form.is_valid():
			form.save()
			return HttpResponseRedirect('/blog/category')#3ayz check
	context = {'category_form':form}
	return render(request, 'blog/Categories_form.html',context )		

# -------------------- edit category --------------------------------------
def edit_category(request , slug):
	cat = Categories.objects.get(slug = slug)
	form = Categories_form(instance = cat)
	if request.method == 'POST':
		form = Categories_form(request.POST, instance = cat)
		if form.is_valid():
			form.save()
			return HttpResponseRedirect('/blog/category')
	context = {'category_form': form}	
	return render(request, 'blog/Categories_form.html',context)
	 
# -------------------- delete category --------------------------------------

def delete_category(request , slug):
	cat = Categories.objects.get(slug = slug)
	cat.delete()
	return HttpResponseRedirect('/blog/category')


# -------------------- each category_posts --------------------------------------

def view_cat_posts(request,slug):
	cat = get_object_or_404(Categories, slug = slug)
	post = cat.posts.all()
	context = {'category':cat , 'post':post}
	return render_to_response ('blog/view_cat_post.html' , context)
#-----------------------------------------------------------------------------------
#bookmark
def index(request):
	all_posts= Posts.objects.all()
	all_cats= Categories.objects.all()
	context ={'all_posts':all_posts, 'all_cats':all_cats}
	return render(request,'blog/index.html',context)

def view_post(request,slug):
	post= Posts.objects.get(slug=slug)
	context = {'post':post}
	return render(request,'blog/view_posts.html',context)

#----------------------- comment ------------------------------

def new_Comment(request):
	form = Comment_Form()
	if request.method == "POST":
		form = Comment_Form(request.POST)
		if form.is_valid():
			obj=form.save()
			obj.check_comment()
			return HttpResponseRedirect('/blog/comments')#m7tag yrg3 l page pta3t el post
	context={'com_form':form}
	return render(request, 'blog/newCommentForm.html', {'com_form':form})#nfs template el post

def view_all_comments(request):
	return render(request,'blog/all_comments.html')#mlhasl lzom


def add_post(request):
	form=Post_Form()
	if request.method == 'POST':
		form=Post_Form(request.POST)
		if form.is_valid():
			form.save()
			return redirect('view_top_post')
	context={'post_form':form}
	return render(request,'blog/postform.html',context)


def delete_post(request,slug):
	post=Posts.objects.get(slug=slug)
	Comment_Section.objects.filter(comment_post=post.id).delete()# de iterator
	post.delete()
	return redirect('view_top_post')



def register(request):
	form = RegistrationForm()
	if request.method == 'POST':
		form = RegistrationForm(request.POST)
		if form.is_valid():
			user = User.objects.create_user(
				username=form.cleaned_data['username'],
				password=form.cleaned_data['password'],
				email=form.cleaned_data['email']
				)
			return HttpResponseRedirect('/register/success/') #url pattern bymatch el urls lw mwgood hyfire method f views

	#lw el form fadya
	
	context = {'form': form}
	return render(request,'registration/register.html',context)

def register_success(request):
    return render_to_response('registration/success.html',)